
## Set of shape_codes and shapes for the generators

def shape_codes():
    shape_codes = ['A', 'B', 'C', 'AA', 'AB', 'AC', 'BA', 'BB', 'BC', 'CA', 'CB', 'CC']
    return shape_codes
      
def shapes():
    shapes = [
            [[1, 1, 1], [1, 0, 1], [1, 1, 1]],  # Full border
            [[1, 0, 1], [0, 1, 0], [1, 0, 1]],  # Diagonal cross
            [[0, 1, 0], [1, 1, 1], [1, 1, 1]],  # Plus with edge arms
            [[1, 1, 1], [1, 0, 0], [1, 1, 1]],  # Spiral corner
            [[0, 1, 0], [1, 0, 1], [0, 1, 0]],  # Dot ring (edges, no corners)
            [[0, 1, 1], [1, 1, 0], [0, 1, 1]],  # Offset band
            [[1, 0, 1], [1, 1, 1], [1, 0, 1]],  # X with center crossbar
            [[1, 1, 1], [1, 0, 0], [1, 0, 1]],  # Inverted L cluster
            [[1, 0, 1], [0, 1, 0], [1, 0, 1]],  # Checkerboard (dense)
            [[0, 1, 0], [1, 1, 1], [0, 1, 1]],  # Arrowhead
            [[1, 1, 0], [0, 1, 1], [1, 1, 0]],  # Snake curve
            [[1, 1, 0], [0, 1, 1], [1, 0, 1]]   # Asymmetric diagonal fill
        ]
    return shapes
    
def number_set():
    number_set = ['2', '10', '11', '12', '20', '21', '22', '100', '101']
    return number_set
    
## Set of edge cases for learning environment for humans

def edge_cases():
    cases =  [
    'A+AA+AB',
    'B+AC+BA',
    'C+BB',
    'A21*21',
    ]
    
    return cases

## Markov transition probabilities - note '*' transition is removed after frist encounter

def markov_transition_probs(shapes, numbers):
        probs = {
            'START': [(s, 1.0 / len(shapes)) for s in shapes],
            
            'A': [(n, 0.55/len(numbers)) for n in numbers] + [('+', 0.2), ('*', 0.2), ('END', 0.15)],
            'B': [(n, 0.55/len(numbers)) for n in numbers] + [('+', 0.2), ('*', 0.2), ('END', 0.15)],
            'C': [(n, 0.55/len(numbers)) for n in numbers] + [('+', 0.2), ('*', 0.2), ('END', 0.15)],
            
            '0': [('+', 0.3), ('*', 0.6), ('END', 0.1)],
            '1': [('+', 0.3), ('*', 0.6), ('END', 0.1)],
            '2': [('+', 0.3), ('*', 0.6), ('END', 0.1)],
            
            '*': [(n, 1.0 / len(numbers)) for n in numbers],
            '+': [(s, 1.0 / len(shapes)) for s in shapes],

            'END': [('END', 1.0)]
        }
        return probs
        


## Set of practice and test questions for Math Takes Two Benchmark
## Question sets are designed to be carried out in order
## Logical reasoning is needed during the train and test sets to enable computation of subsequent examples


def practice_questions():
    program_dict = {
        'set_0':{    # In domain examples from generator
            0:'B12*12',
            1:'BB11+AB2',
            2:'BA2*11',
            3:'BB21+C2',
            4:'BA',
            5:'BB21+A20',
            6:'C+B21*20',
            7:'A12*21',
            8:'B2*20+C2',
            9:'C',
        },
        'set_1':{    # In domain examples from generator
            0:'A21+AA*2',       
            1:'B+A+AA2',
            2:'A*20+AC2',
            3:'AC11+C21',
            4:'A',
            5:'C11*11',
            6:'A*2',
            7:'BA*21',
            8:'BB*21+B',
            9:'B2*21+AC',
        },
        'set_2':{    # In domain examples with designed confounding questions
            0:'C+AC',        
            1:'AB20*12',
            2:'C20*12+B',
            3:'AA20+AB',
            4:'AB+C',
            5:'B*2+AC',
            6:'C*11',
            7:'BA11+AB2',
            8:'C20*2',
            9:'AA12+A*1',
        },
        'set_3':{   # Introduce BC
            0:'BC',         
            1:'BC2',
            2:'AC+BC',
            3:'A+B+BC',
            4:'AA2+BC',
            5:'B2+BC10',
            6:'BC12*21',
            7:'BC*20',
            8:'BC*11+BB',
            9:'BC21*2+C',
        },
        'set_4':{   # Introduce 22
            0:'A22',         
            1:'BB*22',
            2:'BA*2+C22',
            3:'A11*22',
            4:'B+A22*11',
            5:'C22',
            6:'AA*22+C',
            7:'AC2*22+B',
            8:'BB10*22',
            9:'BA+AB22',
        },
        'set_5':{   # BC or 22 alone - mixture with in domain
            0:'A*20+BC',
            1:'C*21+AB',
            2:'BA22*21',
            3:'AC22*2+B',
            4:'B2*21',
            5:'BC11+BA',
            6:'AB2*22',
            7:'BC20*10',
            8:'AA',
            9:'AA21*2',
        },
        'set_6':{   # BC x 22 combinations
            0:'BC22',
            1:'BC*22',
            2:'BC22+C',
            3:'BC22+A',
            4:'BC10*22',
            5:'BC22*10',
            6:'BB+BC22',
            7:'AB*22+BC',
            8:'A22*2+BC',
            9:'BC22*22',
        },
        'set_7':{    # Introduce CA into answers 
            0:'B+AC2*21',
            1:'AA+A+B',
            2:'C2+AA21',
            3:'BC22*11',
            4:'B+AC22*1',
            5:'BC2+BA20',
            6:'BB11*10',
            7:'AC*10+AB',
            8:'BB12*22',
            9:'BC*2+AA',
        },
        'set_8':{   # Introduce CA - inc. BC jump for tough/human level challenge 
            0:'BC+CA*21',
            1:'CA10*20',
            2:'C2+CA21',
            3:'B2*11+CA',
            4:'CA*10+BC',
            5:'CA*2',
            6:'CA21',
            7:'CA*10+AA',
            8:'BA+CA*2',
            9:'BC*2+CA',
        },
        'set_9':{ # CA x 22 combinations - mixed with in domain
            0:'AA+AC+BC',
            1:'CA2*22+B',
            2:'AC+BC*10',
            3:'CA22*11',
            4:'CA22+BB',
            5:'C+B+A12',
            6:'CA*12+AB',
            7:'AA22*11',
            8:'CA21*22',
            9:'BC*12+A',
        }
    }

    question_dict = {
        'set_0':{ # In domain examples from generator
            0:['B12*12', 'B11*12', 'AC+AB', 'B12*2'],
            1:['BB11+AB2', 'BB1+AB10', 'BB11+B20', 'BB'],
            2:['BA2*11', 'BB12*21', 'C2*11', 'BA10*11'],
            3:['BB21+C2', 'BB21+C21', 'BB21+AB2', 'AA2*21'],
            4:['BA', 'AB+BA20', 'AC', 'C'],
            5:['BB21+A20', 'AA*11', 'BB21+A2', 'BB20+A20'],
            6:['C+B21*20', 'C+B2*20', 'A*10+AA2', 'A+B21*20'],
            7:['A12*21', 'AC12*21', 'AC12*10', 'BB12*21'],
            8:['B2*20+C2', 'B10*2+C2', 'B2*10+C2', 'BA20*2'],
            9:['C', 'A', 'AC21*10', 'BB'],
        },
        'set_1':{   # In domain examples from generator
            0:['A21+AA*2','A2+AA*2','AB20*21','A21+A*11'],
            1:['B+A+AA2','AC10','B+A+AC2','B+A+AA10'],
            2:['A*20+AC2','BA2+BB','A*10+AC2','A*11+AC2'],
            3:['AC11+C21','C11+C11','A21+C21','AC'],
            4:['A','AB','BA11*10','C'],
            5:['C11*11','C11*20','BA12*12','C2*20'],
            6:['A*2','BB11*21','A*20', 'BB*2'],
            7:['BA*21','C*10+AA2','BA*11','BA*10'],
            8:['BB*21+B','BB*10+B','AC+C*20','BB*2+B'],
            9:['B2*21+AC','AB2*21+C','BA2*21+C','AA10*12'],
        },
        'set_2':{    # In domain examples with designed confounding questions
            0:['C+AC','C+A','C+AA','C'],        
            1:['AB20*12','AB12*20','AA20*12','AA20'],
            2:['C20*12+B','C20*12','B','C20*11+B'],
            3:['AA20+AB','AB+AA20','AA21+AB','AA20+AB2'],
            4:['AB+C','AB+AA','C+AB','AB*2+C'],
            5:['B*2+AC','B2+AC','B*10+AC','B*11+AC'],
            6:['C*11','C*10','C','C11'],
            7:['BA11+AB2','BB+AB2','BB','BA'],
            8:['C20*2','C2*20','C*20','C2'],
            9:['AA12+A*1','AA12+B','AA12+BB','AA12+BA'],
        },
        'set_3':{    # Introduce BC
            0:['BC','A','B','B21'],
            1:['BC2','C2','B*2','A21'],
            2:['AC+BC','B + AC','AC + A*2','BC'],
            3:['A+B+BC','C+B+A','B21*10','A+BA'],
            4:['AA2+BC','AB1+BC','AA+BC','AA2+BA2'],
            5:['B2+BC10','B*2+BC10','B2+BC*10','B2+A10'],
            6:['BC12*21','BC12*20','BC','BC*21'],
            7:['BC*20','AC*20','BB20','BC20'],
            8:['BC*11+BB','BC*11+AA','BC*11+AB','BC11+BB'],
            9:['BC21*2+C','BC2*21+A','BC21*2','BC2*20+C'],
        },
        'set_4':{   # Introduce 22
            0:['A22', 'A12', 'BB+C2*12', 'AA22'],
            1:['BB*22', 'BB*21', 'BA*20', 'AB22*12'],
            2:['BA*2+C22', 'BA*2+C20', 'BC21+BB', 'BA*2+A2'],
            3:['A11*22', 'A10*22', 'AC11*11', 'BC11'],
            4:['B+A22*11', 'B+A2*11', 'B+A12*11', 'C+A21'],
            5:['C22', 'AB21', 'BA11*21', 'C20'],
            6:['AA*22+C', 'BB*22+C', 'AC10*10', 'AA*2+C'],
            7:['AC2*22+B', 'AB2*11+B', 'AA12+B12', 'AC2*12+B'],
            8:['BB10*22', 'BB10*12', 'BB20*22', 'BB2*2+C2'],
            9:['BA+AB22', 'BA+B10', 'C+A2+AB', 'BA+AB21'],
        },
        'set_5':{   # BC or 22 alone - mixture with in domain
            0:['A*20+BC', 'A*22+BC', 'A*11+BC', 'A10*21+A'],
            1:['C*21+AB', 'C2*21+C', 'C*22+AB', 'C*10+AB'],
            2:['BA22*21', 'AA11*10', 'BC22*11', 'BA22*2'],
            3:['AC22*2+B', 'B22*12+B', 'B+C*12', 'AC22*12'],
            4:['B2*21', 'B12*21', 'AC2*21', 'C+BB20+A'],
            5:['BC11+BA', 'AC', 'AA21+BA', 'BC22+BA'],
            6:['AB2*22', 'AB*11', 'BB2*22', 'AB2*2'],
            7:['BC20*10', 'AC21*10', 'C12*10', 'BC11+AB1'],
            8:['AA', 'B+BC10*1', 'BB2+AC+A', 'AB'],
            9:['AA21*2', 'B21*2', 'B2*21+BB', 'BC21*2'],
        },
        'set_6':{    # BC x 22 combinations
            0:['BC22', 'B22*22+B', 'BC12', 'AB22'],
            1:['BC*22', 'BC*10', 'BC2*20', 'BC*12'],
            2:['BC22+C', 'BA20*12', 'BC2', 'BA22'],
            3:['BC22+A', 'AB21+AC2', 'AC22+A', 'A2+A'],
            4:['BC10*22', 'C+BB21*2', 'A10*22', 'BC20*22'],
            5:['BC22*10', 'B22*21', 'BA+C*22', 'AA22*10'],
            6:['BB+BC22', 'BA+BC21', 'AB+AC+B', 'BB+AA10'],
            7:['AB*22+BC', 'AB*2+BC', 'B22*21', 'AB*21+BC'],
            8:['A22*2+BC', 'A22*10+A', 'BA11+AB', 'B22*21+B'],
            9:['BC22*22', 'AB*21+BB', 'B22*20', 'AA22*22'],
        },
        'set_7':{    # Introduce CA into answers 
            0:['B+AC2*21', 'B*20+CA1', 'B+BC2*2', 'B+AC2*20'],
            1:['AA+A+B', 'AA+CA+B', 'CA+BB*2', 'AC*20'],
            2:['C2+AA21', 'C2+CA22', 'AB2+CA21', 'B+BA+CA1'],
            3:['BC22*11', 'CA', 'BC12*11', 'CA22*11'],
            4:['B+AC22*1', 'B+AC10*1', 'CA*11+BB', 'B+BC12*1'],
            5:['BC2+BA20', 'BC2+CA20', 'CA21*10', 'BB10+CA'],
            6:['BB11*10', 'CA11*10', 'BB11*21', 'AA+CA'],
            7:['AC*10+AB', 'CA*20+AA', 'B11*11+C', 'CA*10+AA'],
            8:['BB12*22', 'C*2+BB20', 'CA12*21', 'CA12*20'],
            9:['BC*2+AA', 'CA', 'BC*22+CA', 'AB*2+CA'],
        },
        'set_8':{    # Introduce CA - inc. BC jump for tough/human level challenge 
            0:['BC+CA*21', 'AB+CA*2', 'BC+CA*20', 'BA+BC'],
            1:['CA10*20', 'CA21*20', 'BA+AC22', 'A10*22'],
            2:['C2+CA21', 'C2+CA2', 'A2+CA21', 'CA11*2+A'],
            3:['B2*11+CA', 'B2*12+CA', 'B12*11+C', 'A+C*22'],
            4:['CA*10+BC', 'CA*10+BB', 'AC*10+A2', 'CA*20+BB'],
            5:['CA*2', 'CA*10', 'CA10+AA', 'CA*12'],
            6:['CA21', 'BB', 'C21', 'BC10'],
            7:['CA*10+AA', 'BC22*2+B', 'CA*22+AA', 'CA*11+AA'],
            8:['BA+CA*2', 'BA10*10', 'BA+BA*2', 'B+CA*21'],
            9:['BC*2+CA', 'AC11*2+A', 'BC*12+CA', 'BC*2+AB'],
        },
        'set_9':{     # CA x 22 combinations - mixed with in domain
            0:['AA+AC+BC', 'AA+AC+BB', 'AA+AC+AB', 'B10*21'],
            1:['CA2*22+B', 'AB22+CA', 'CA2*22+C', 'CA2*20+B'],
            2:['AC+BC*10', 'A22*12+A', 'AC+BC*2', 'AC+BC*12'],
            3:['CA22*11', 'C22*2', 'AB22*11', 'BC22*10'],
            4:['CA22+BB', 'AA+BB11', 'CA11+BB', 'CA21+BB'],
            5:['C+B+A12', 'B+B+A20', 'C+B+BB12', 'AB+A20'],
            6:['CA*12+AB', 'CA*11+B', 'AA2+AB11', 'CA*21+AB'],
            7:['AA22*11', 'BC*21', 'AA12*11', 'B22*12'],
            8:['CA21*22', 'AC21+BB', 'CA21*10', 'BC20*22'],
            9:['BC*12+A', 'B20*10+B', 'BC*22+A', 'BC*2+A'],
        }
    }
    return program_dict, question_dict

def practice_assignments():
    assignments = {'set_0': [8, 3, 9, 1, 6, 4, 5, 0, 7, 2],
                   'set_1': [7, 8, 6, 4, 0, 1, 3, 5, 9, 2],
                   'set_2': [8, 1, 0, 5, 9, 3, 4, 6, 2, 7],
                   'set_3': [9, 5, 7, 0, 3, 6, 8, 4, 1, 2],
                   'set_4': [4, 7, 2, 1, 0, 3, 8, 9, 6, 5],
                   'set_5': [5, 7, 0, 2, 1, 9, 4, 8, 6, 3],
                   'set_6': [4, 2, 6, 0, 1, 5, 3, 7, 8, 9],
                   'set_7': [0, 1, 2, 9, 8, 3, 7, 6, 5, 4],
                   'set_8': [0, 6, 5, 9, 7, 8, 1, 2, 4, 3],
                   'set_9': [2, 4, 5, 1, 3, 0, 6, 7, 8, 9]}
    
    return assignments

def practice_rinds():

    rinds = {'set_0': {0: [3, 1, 0, 2],
      1: [3, 1, 0, 2],
      2: [0, 2, 3, 1],
      3: [1, 2, 0, 3],
      4: [2, 3, 0, 1],
      5: [1, 3, 2, 0],
      6: [1, 0, 2, 3],
      7: [2, 3, 0, 1],
      8: [1, 0, 3, 2],
      9: [3, 2, 1, 0]},
     'set_1': {0: [3, 1, 0, 2],
      1: [0, 1, 2, 3],
      2: [1, 0, 3, 2],
      3: [3, 1, 0, 2],
      4: [3, 1, 2, 0],
      5: [3, 1, 0, 2],
      6: [0, 3, 1, 2],
      7: [2, 0, 1, 3],
      8: [1, 2, 3, 0],
      9: [2, 0, 3, 1]},
     'set_2': {0: [2, 0, 1, 3],
      1: [0, 1, 2, 3],
      2: [1, 0, 2, 3],
      3: [0, 3, 1, 2],
      4: [0, 1, 3, 2],
      5: [1, 2, 0, 3],
      6: [3, 1, 0, 2],
      7: [2, 3, 1, 0],
      8: [2, 3, 1, 0],
      9: [0, 1, 3, 2]},
     'set_3': {0: [0, 2, 1, 3],
      1: [2, 0, 1, 3],
      2: [3, 1, 2, 0],
      3: [2, 3, 1, 0],
      4: [0, 3, 1, 2],
      5: [1, 3, 0, 2],
      6: [1, 2, 0, 3],
      7: [2, 3, 0, 1],
      8: [1, 0, 3, 2],
      9: [0, 1, 3, 2]},
     'set_4': {0: [1, 2, 3, 0],
      1: [1, 0, 3, 2],
      2: [3, 2, 1, 0],
      3: [0, 2, 1, 3],
      4: [3, 2, 0, 1],
      5: [3, 2, 0, 1],
      6: [3, 0, 2, 1],
      7: [1, 0, 2, 3],
      8: [3, 1, 2, 0],
      9: [0, 1, 3, 2]},
     'set_5': {0: [3, 1, 2, 0],
      1: [0, 1, 3, 2],
      2: [1, 3, 0, 2],
      3: [3, 0, 1, 2],
      4: [0, 3, 2, 1],
      5: [3, 0, 2, 1],
      6: [3, 0, 1, 2],
      7: [2, 3, 1, 0],
      8: [1, 2, 0, 3],
      9: [0, 1, 2, 3]},
     'set_6': {0: [1, 0, 3, 2],
      1: [3, 2, 0, 1],
      2: [1, 2, 3, 0],
      3: [0, 2, 1, 3],
      4: [0, 3, 2, 1],
      5: [1, 0, 2, 3],
      6: [0, 3, 2, 1],
      7: [1, 2, 3, 0],
      8: [2, 1, 0, 3],
      9: [3, 2, 1, 0]},
     'set_7': {0: [2, 1, 3, 0],
      1: [1, 0, 2, 3],
      2: [0, 3, 2, 1],
      3: [2, 0, 3, 1],
      4: [3, 1, 2, 0],
      5: [1, 2, 3, 0],
      6: [2, 0, 3, 1],
      7: [1, 2, 3, 0],
      8: [1, 3, 0, 2],
      9: [2, 1, 0, 3]},
     'set_8': {0: [1, 3, 2, 0],
      1: [0, 3, 2, 1],
      2: [3, 1, 2, 0],
      3: [1, 3, 2, 0],
      4: [2, 3, 0, 1],
      5: [1, 0, 2, 3],
      6: [0, 2, 3, 1],
      7: [2, 0, 3, 1],
      8: [3, 2, 0, 1],
      9: [2, 0, 1, 3]},
     'set_9': {0: [1, 0, 3, 2],
      1: [3, 0, 2, 1],
      2: [2, 3, 0, 1],
      3: [2, 0, 1, 3],
      4: [3, 0, 1, 2],
      5: [1, 0, 3, 2],
      6: [2, 1, 0, 3],
      7: [3, 0, 2, 1],
      8: [0, 1, 2, 3],
      9: [3, 2, 0, 1]}}
    
    return rinds

def test_questions():
    program_dict = {
        'set_0':{    # In domain examples from generator
            0:'AC+BA12',
            1:'B10*10+A',
            2:'B*12',
            3:'C22*20+C',
            4:'AC*12',
            5:'AA+CA*22',
            6:'AC2+BC+A',
            7:'AB+AC',
            8:'BA+BB+C',
            9:'B*10+BC2',
        },
        'set_1':{    # In domain examples from generator
            0:'AC21+CA',
            1:'BC*22+BA',
            2:'AA22+BB',
            3:'AB10+CA2',
            4:'BB*11+AA',
            5:'AA+A21*2',
            6:'A+AC*2+B',
            7:'C*11+AC',
            8:'BA2*12+A',
            9:'AA12+CA',
        },
        'set_2':{    # In domain examples with designed confounding questions
            0:'BC22*20',
            1:'BA+BB*10',
            2:'CA*2+CB2',
            3:'BC+BA+AB',
            4:'BB+BC11',
            5:'AB+B',
            6:'AB10*12',
            7:'AC11*10',
            8:'BB20*20',
            9:'AC21+BA1',
        },
        'set_3':{   # Introduce CB
            0:'CB',
            1:'CB2',
            2:'CB*10',
            3:'CB+A',
            4:'CB+CA',
            5:'CB*22',
            6:'CB22*22',
            7:'CB+BC',
            8:'AA*20+CB',
            9:'CB2+BA22',
        },
        'set_4':{   # Introduce 100 with 101 in answers
            0:'BC100*22',
            1:'C*100+B2',
            2:'AC*100',
            3:'B100+C',
            4:'AA100*2',
            5:'CB*100',
            6:'CA2*100',
            7:'AC100*22',
            8:'C21*100',
            9:'A100*100',
        },
        'set_5':{   # CB or 100 alone - mixture with in domain and 101 in answers
            0:'CA11+CB2',
            1:'BC20*20',
            2:'AA100*22',
            3:'CB22*21',
            4:'B20+CB',
            5:'C11*20',
            6:'CB22*2+C',
            7:'AB*20+A',
            8:'CB+A11+B',
            9:'CA100+CB',
        },
        'set_6':{   # CB, 100, 101 combinations
            0:'CB*101+B',
            1:'CB10+A*1',
            2:'AC+AA*22',
            3:'AA+CB22',
            4:'CA*101',
            5:'CA12*10',
            6:'CB22*100',
            7:'CB101*2',
            8:'CB101*20',
            9:'A100+CB2',
        },
        'set_7':{    # Introduce CC into answers
            0:'A12*101',
            1:'AB22*2+B',
            2:'BA+CA10',
            3:'C+BB12*2',
            4:'AA',
            5:'C22+AB*2',
            6:'BA20*2+C',
            7:'AC100+AA',
            8:'BA',
            9:'BA10',
        },
        'set_8':{   # Introduce CC inc. 100, 101 combinations
            0:'CC',
            1:'CC*10',
            2:'CC2',
            3:'CC2+A',
            4:'BA+CC',
            5:'BC+CC+C',
            6:'AA*22+CC',
            7:'BC+CC2',
            8:'CC*100',
            9:'CC101*2',
        },
        'set_9':{ # CC, 100, 101 combinations
            0:'CC*101+B',
            1:'A',
            2:'AB*21+AB',
            3:'CC*2+BA2',
            4:'CC+AA100',
            5:'BC+CC+CB',
            6:'CC22*101',
            7:'A+CC+B',
            8:'CB*2+CC2',
            9:'CC101*22',
        }
    }

    question_dict = {
        
        'set_0':{    # In domain examples from generator
            0:['AC+BA12', 'AC+BA11', 'AC+BA2', 'CA'],
            1:['B10*10+A', 'AB10*10', 'A*2+AC10', 'B20*10+A'],
            2:['B*12', 'AC*2', 'C*2', 'A10*22'],
            3:['C22*20+C', 'AC12*20', 'BB+A*20', 'C22*2+CA'],
            4:['AC*12', 'AC*20', 'AC11*12', 'AA*2'],
            5:['AA+CA*22', 'B+CA*10', 'AA+C*22', 'A10*10+B'],
            6:['AC2+BC+A', 'AA11+BB1', 'AC2+BC+C', 'AC10+BC'],
            7:['AB+AC', 'B+CA20*1', 'BA21', 'AB+BB'],
            8:['BA+BB+C', 'BC+BB+C', 'A11', 'BA+A+C'],
            9:['B*10+BC2', 'B*10+AA2', 'B*11+BC2', 'AA11*20'],
        },
        'set_1':{    # In domain examples from generator
            0:['AC21+CA', 'AC11+CA', 'AC10+CA', 'AA22*21'],
            1:['BC*22+BA', 'C*22+BA', 'A10+BB+A', 'BB*11+BA'],
            2:['AA22+BB', 'B21', 'AA11+BB', 'B22+BB'],
            3:['AB10+CA2', 'AB10+B2', 'AB20+CA2', 'AB10+BC2'],
            4:['BB*11+AA', 'B*11+AA', 'BA*2+AA', 'AC12'],
            5:['AA+A21*2', 'CA*21+AC', 'AA+BB10', 'AA+AC21'],
            6:['A+AC*2+B', 'BB11*22', 'A+C*10+B', 'A+A*11+B'],
            7:['C*11+AC', 'AB*11+AC', 'A11*22+B', 'BC*12+AC'],
            8:['BA2*12+A', 'BA21*12', 'BC12*10', 'B2*12+A'],
            9:['AA12+CA', 'AA22+CA', 'AB12+CA', 'AB*2+B12'],
        },
        'set_2':{    # In domain examples with designed confounding questions
            0:['BC22*20','CA22*20','BC21*20','BC22*21'],
            1:['BA+BB*10','BA+BB*11','BA+BB*22','CA+BB*10'],
            2:['CA*2+CB2','CA*2','AC2','CA2*2'],
            3:['BC+BA+AB','BA+BC+AB','AB+BA+BC','BC+BA+CA'],
            4:['BB+BC11','BB+CA11','BB','BC11'],
            5:['AB+B','B+AB','AB+B+CA','AB+B+CA2'],
            6:['AB10*12','AB11*12','AB10*22','AB22*22'],
            7:['AC11*10','AC10*11','AC22*10','AC11*22'],
            8:['BB20*20','BB10*10','CA20*20','BA20*20'],
            9:['AC21+BA1','AC22+BA1','BA1+AC21','CA21+BA1'],
        },
        'set_3':{   # Introduce CB
            0:['CB', 'A+AA12+C', 'BC', 'BC22*22'],
            1:['CB2', 'CB11', 'CB20', 'AB10*20'],
            2:['CB*10', 'BB10*22', 'CB*22', 'AB*20'],
            3:['CB+A', 'C+CB21+C', 'CB+CB', 'AA20*20'],
            4:['CB+CA', 'BB', 'AB*10+BB', 'BC+CA'],
            5:['CB*22', 'CA', 'CB*20', 'BC*21'],
            6:['CB22*22', 'CB22*10', 'C22*22', 'B22*12+C'],
            7:['CB+BC', 'A+CB12+C', 'CB+BA', 'AB'],
            8:['AA*20+CB', 'CB10*2+B', 'AA*20+B', 'AA*20+C'],
            9:['CB2+BA22', 'AC2+BA22', 'BC+AA*10', 'CB2+AC22'],
        },
        'set_4':{   # Introduce 100 with 101 in answers
            0:['BC100*22', 'BA101*22', 'AC+AA11', 'B10*22'],
            1:['C*100+B2', 'CB10+C21', 'B101+BB2', 'C21+B21'],
            2:['AC*100', 'C2+BA*2', 'CB100+AC', 'CB101+AC'],
            3:['B100+C', 'BB+AC20', 'B101+BC1', 'BB+A+B12'],
            4:['AA100*2', 'AC20*12', 'CB100+BA', 'AB20*20'],
            5:['CB*100', 'B+C101', 'B+C20+CA', 'AC100'],
            6:['CA2*100', 'CB101*2', 'CB20*2+A', 'C101+B+C'],
            7:['AC100*22', 'CB100', 'CA*20+AC', 'AA2*101'],
            8:['C21*100', 'B101+AB', 'AA+C100', 'CB*2+A+C'],
            9:['A100*100', 'BC20*20', 'B101*2+B', 'A+AB*101'],
        },
        'set_5':{   # CB  100 combinations - mixture with in domain and 101 in answers
            0:['CA11+CB2', 'CA100+B', 'CA21+CB2', 'CA22+CB2'],
            1:['BC20*20', 'BC20*12', 'CB20*20', 'CA+CB*2'],
            2:['AA100*22', 'AA101*21', 'CB', 'AA101*22'],
            3:['CB22*21', 'CB21*21', 'CB11*21', 'AB'],
            4:['B20+CB', 'BC10+CB', 'B20+AC', 'AA21*2+B'],
            5:['C11*20', 'AB+CB+AA', 'C12*20', 'BC11*20'],
            6:['CB22*2+C', 'CB22+CA', 'AA+B2*10', 'CB10*2+C'],
            7:['AB*20+A', 'AB*20+BA', 'A10*20+B', 'AB*11+A'],
            8:['CB+A11+B', 'CB+AA1+B', 'A', 'CB+A12+B'],
            9:['CA100+CB', 'BC101+CB', 'CB10*10', 'CA101+CB'],
        },
        'set_6':{   # CB, 100, 101 combinations
            0:['CB*101+B', 'BB2*20+A', 'CB', 'CB*100+B'],
            1:['CB10+A*1', 'CB11+A*1', 'CB20+A*1', 'AA2*2+AC'],
            2:['AC+AA*22', 'AB', 'AC+BB*12', 'AC+AA*21'],
            3:['AA+CB22', 'C+CB22', 'AA+CB21', 'BC'],
            4:['CA*101', 'AA100+CA', 'B*101', 'BB*101'],
            5:['CA12*10', 'CA12*20', 'BB22+CB2', 'CA20*10'],
            6:['CB22*100', 'B22*100', 'AA+A21*1', 'CA22*100'],
            7:['CB101*2', 'CA*20+CA', 'C21', 'CB100*2'],
            8:['CB101*20', 'A2', 'CB101*12', 'CA101*20'],
            9:['A100+CB2', 'BC100+C2', 'A100+BA2', 'B'],
        },
        'set_7':{    # Introduce CC into answers
            0:['A12*101', 'CC12*101', 'A10*101', 'BB22+CC2'],
            1:['AB22*2+B', 'BA22*2+B', 'AB+CB10', 'C22*2+B'],
            2:['BA+CA10', 'CC+CA22', 'A+CC101', 'BA+CA21'],
            3:['C+BB12*2', 'CC+B12*2', 'CC10*22', 'AC+B12*2'],
            4:['AA', 'CC', 'BC100', 'CA'],
            5:['C22+AB*2', 'CC21+AB', 'BA*11+CC', 'C22+CC*2'],
            6:['BA20*2+C', 'BA20*2+B', 'BA20+CC', 'CC*20'],
            7:['AC100+AA', 'CC*2+AC2', 'BB101+AA', 'AC101+CC'],
            8:['BA', 'CC', 'CC*100+B', 'BB'],
            9:['BA10', 'CC2*11+C', 'BC11', 'CC11'],
        },
        'set_8':{   # Introduce CC inc. 100, 101 combinations
            0:['CC', 'CB*10', 'BA*12+AB', 'C'],
            1:['CC*10', 'CC*22', 'CC*20', 'BB*11'],
            2:['CC2', 'CA', 'BA2+CB*1', 'BB11+A+C'],
            3:['CC2+A', 'B*21+AC1', 'B2+A', 'CC22+AC1'],
            4:['BA+CC', 'BA10*2+C', 'BC10*20', 'CC11+AB'],
            5:['BC+CC+C', 'CB*22', 'BC+B+C', 'AA*11+AC'],
            6:['AA*22+CC', 'CB100*12', 'AA*10+BC', 'AA*21+CC'],
            7:['BC+CC2', 'CB+CC2', 'BC+CB2', 'AB10*20'],
            8:['CC*100', 'CC12*20', 'CA12', 'CC*101'],
            9:['CC101*2', 'CC100*2', 'BC101*2', 'BA101+CC'],
        },
        'set_9':{ # CC, 100, 101 combinations
            0:['CC*101+B', 'AC*101+B', 'CB*101+B', 'BC'],
            1:['A', 'BA*21', 'AB', 'BC21'],
            2:['AB*21+AB', 'CA*21+AB', 'CC20*10', 'AC*11+AB'],
            3:['CC*2+BA2', 'CA+AB101', 'B+CB+AA2', 'A*2+BA2'],
            4:['CC+AA100', 'AA20', 'AC+AA100', 'CC+A100'],
            5:['BC+CC+CB', 'BA*101+B', 'AB*20+A', 'BB22*12'],
            6:['CC22*101', 'CB10*22', 'CC20*101', 'CC22*100'],
            7:['A+CC+B', 'CA', 'BC20*2', 'BB12'],
            8:['CB*2+CC2', 'AA*101+A', 'B12*10', 'BA*2'],
            9:['CC101*22', 'CC100*22', 'CC+CB20', 'AB101*22'],
        }
    }
    return program_dict, question_dict

def test_assignments():
    assignments = {'set_0': [0, 7, 9, 4, 8, 2, 3, 1, 6, 5],
                   'set_1': [4, 8, 9, 5, 3, 0, 1, 6, 2, 7],
                   'set_2': [7, 2, 9, 8, 3, 4, 5, 0, 1, 6],
                   'set_3': [2, 5, 6, 8, 0, 7, 3, 4, 1, 9],
                   'set_4': [8, 4, 2, 3, 7, 9, 5, 1, 0, 6],
                   'set_5': [7, 1, 9, 4, 6, 2, 5, 8, 3, 0],
                   'set_6': [0, 7, 2, 4, 5, 6, 8, 9, 1, 3],
                   'set_7': [8, 0, 6, 3, 1, 2, 7, 9, 4, 5],
                   'set_8': [6, 4, 5, 9, 1, 8, 7, 2, 0, 3],
                   'set_9': [6, 7, 9, 1, 4, 8, 0, 5, 2, 3]}
    
    return assignments

def test_rinds():

    rinds = {'set_0': {0: [2, 3, 1, 0],
      1: [2, 1, 0, 3],
      2: [1, 3, 2, 0],
      3: [1, 2, 3, 0],
      4: [3, 0, 1, 2],
      5: [3, 0, 1, 2],
      6: [0, 1, 3, 2],
      7: [1, 2, 0, 3],
      8: [3, 0, 2, 1],
      9: [1, 2, 0, 3]},
     'set_1': {0: [1, 0, 3, 2],
      1: [1, 0, 2, 3],
      2: [2, 1, 3, 0],
      3: [0, 3, 2, 1],
      4: [3, 2, 0, 1],
      5: [1, 3, 2, 0],
      6: [2, 0, 3, 1],
      7: [3, 1, 2, 0],
      8: [2, 0, 3, 1],
      9: [1, 0, 2, 3]},
     'set_2': {0: [2, 3, 0, 1],
      1: [3, 1, 2, 0],
      2: [2, 0, 1, 3],
      3: [0, 2, 1, 3],
      4: [2, 0, 1, 3],
      5: [0, 1, 2, 3],
      6: [1, 2, 3, 0],
      7: [0, 3, 1, 2],
      8: [2, 1, 3, 0],
      9: [0, 3, 1, 2]},
     'set_3': {0: [1, 2, 3, 0],
      1: [2, 3, 1, 0],
      2: [3, 0, 2, 1],
      3: [0, 3, 1, 2],
      4: [0, 1, 3, 2],
      5: [2, 0, 1, 3],
      6: [2, 3, 1, 0],
      7: [2, 1, 3, 0],
      8: [0, 2, 1, 3],
      9: [3, 1, 2, 0]},
     'set_4': {0: [2, 3, 1, 0],
      1: [0, 3, 2, 1],
      2: [2, 3, 1, 0],
      3: [3, 1, 0, 2],
      4: [0, 2, 1, 3],
      5: [2, 3, 0, 1],
      6: [2, 0, 1, 3],
      7: [3, 2, 0, 1],
      8: [1, 3, 0, 2],
      9: [0, 1, 3, 2]},
     'set_5': {0: [0, 3, 2, 1],
      1: [2, 0, 3, 1],
      2: [3, 0, 1, 2],
      3: [3, 2, 1, 0],
      4: [2, 0, 3, 1],
      5: [2, 3, 1, 0],
      6: [2, 3, 1, 0],
      7: [2, 3, 0, 1],
      8: [0, 2, 1, 3],
      9: [2, 1, 0, 3]},
     'set_6': {0: [2, 0, 1, 3],
      1: [1, 3, 2, 0],
      2: [1, 3, 0, 2],
      3: [3, 0, 1, 2],
      4: [3, 2, 0, 1],
      5: [3, 1, 0, 2],
      6: [0, 2, 3, 1],
      7: [1, 3, 0, 2],
      8: [2, 0, 1, 3],
      9: [0, 3, 2, 1]},
     'set_7': {0: [3, 0, 1, 2],
      1: [1, 2, 0, 3],
      2: [1, 2, 3, 0],
      3: [3, 1, 2, 0],
      4: [3, 1, 0, 2],
      5: [2, 3, 0, 1],
      6: [2, 3, 0, 1],
      7: [0, 1, 3, 2],
      8: [3, 0, 2, 1],
      9: [2, 0, 1, 3]},
     'set_8': {0: [0, 3, 1, 2],
      1: [3, 1, 2, 0],
      2: [3, 0, 1, 2],
      3: [3, 0, 2, 1],
      4: [2, 1, 0, 3],
      5: [3, 1, 0, 2],
      6: [1, 2, 3, 0],
      7: [3, 2, 0, 1],
      8: [1, 2, 0, 3],
      9: [0, 3, 1, 2]},
     'set_9': {0: [3, 1, 2, 0],
      1: [3, 1, 0, 2],
      2: [2, 3, 1, 0],
      3: [1, 3, 0, 2],
      4: [2, 1, 3, 0],
      5: [1, 0, 2, 3],
      6: [2, 3, 1, 0],
      7: [2, 0, 3, 1],
      8: [0, 3, 1, 2],
      9: [3, 1, 0, 2]}}
    
    return rinds



